{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","serviceWorker.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","addAuthorMutation","_templateObject4","getBookQuery","_templateObject5","BookDetails","book","this","props","data","react_default","a","createElement","title","category","author","name","books","map","item","key","id","className","viewBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","viewBooks","components_BookDetails","compose","AddBook","authorId","age","authors","value","preventDefault","refetchQueries","query","onSubmit","submitAuthorForm","bind","type","onChange","target","placeholder","submitBookForm","viewAuthors","client","ApolloClient","uri","App","react_apollo_esm","components_AddBook","components_BookList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26c0e1d0.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst getBooksQuery = gql`\n    {\n        books {\n            id\n            title\n            category\n        }\n    }\n`\n\nconst getAuthorsQuery = gql`\n    {\n        authors {\n            id\n            name\n        }\n    }\n`\n\nconst addBookMutation = gql`\n    mutation($title: String!, $category: String!, $authorId: ID!){\n        addBook(title: $title, category: $category, authorId: $authorId) {\n            title\n            id\n        }\n    }\n`\nconst addAuthorMutation = gql`\n    mutation($name: String!, $age: String!){\n        addAuthor(name: $name, age: $age) {\n            name\n            age\n        }\n    }\n`\n\nconst getBookQuery = gql`\n    query($id: ID){\n        book(id: $id){\n            id\n            title\n            category\n            author{\n                name\n                age\n                id\n                books{\n                    title\n                    id    \n                }\n            }\n        }\n    }\n`\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, addAuthorMutation, getBookQuery };","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getBookQuery} from '../queries/queries';\n\nclass BookDetails extends Component {\n\n    viewBookDetails(){\n        const { book } = this.props.data;\n        if (book) {\n            return (\n                <div>\n                    <h2>{book.title}</h2><hr/>\n                    <p><b>Category : </b>{book.category}</p>\n                    <p><b>Author : </b>{book.author.name}</p>\n                    <p><b>All books written by the author</b></p>\n                    <ul>\n                    {\n                        book.author.books.map(item => {\n                            return (\n                                <li key={item.id}>{item.title}</li>\n                            );\n                        })\n                    }\n                    </ul>\n                </div>\n            );\n        }\n        else {\n            return (<div>No book selected</div>);\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"bookDetails\">\n                <br/>{this.viewBookDetails()}\n            </div>\n        );\n    }\n}\n\nexport default graphql(getBookQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.bookId\n            }\n        }\n    }\n})(BookDetails);","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { getBooksQuery } from '../queries/queries';\nimport BookDetails from './BookDetails';\n\nclass BookList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: null\n        }\n    }\n    viewBooks() {\n        var data = this.props.getBooksQuery;\n        if (data.loading) {\n            return (<div>loading...</div>);\n        }\n        else {\n            return data.books.map(book => {\n                return (                  \n                    <li className=\"book\" key={book.id} onClick={(e) => this.setState({selected: book.id})}>\n                        {book.title}\n                    </li>                    \n                );\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"bookList\">\n                <div className=\"bookItems\">\n                    { this.viewBooks() }\n                </div>\n                <div>\n                    <BookDetails bookId={this.state.selected}/>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default compose(\n    graphql(getBooksQuery, {name: 'getBooksQuery'})\n)(BookList);\n","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { getAuthorsQuery, addBookMutation, addAuthorMutation, getBooksQuery } from '../queries/queries';\n\nclass AddBook extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            category: '',\n            authorId: '',\n            name: '',\n            age: ''\n        }\n    }\n    viewAuthors() {\n        var data = this.props.getAuthorsQuery;\n        if (data.loading) {\n            return (<option>loading authors...</option>);\n        }\n        else {\n            return data.authors.map(author => {\n                return (\n                    <option key={author.id} value={author.id}>{author.name}</option>\n                );\n            })\n        }\n    }\n\n    submitBookForm(e) {\n        e.preventDefault();\n        // console.log(this.state)\n        this.props.addBookMutation({\n            variables: {\n                title: this.state.title,\n                category: this.state.category,\n                authorId: this.state.authorId\n            },\n            refetchQueries: [{query: getBooksQuery}]\n        });\n    }\n\n    submitAuthorForm(e) {\n        e.preventDefault();\n        // console.log(this.state)\n        this.props.addAuthorMutation({\n            variables: {\n                name: this.state.name,\n                age: this.state.age\n            },\n            refetchQueries: [{query: getAuthorsQuery}]\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"addBook\">\n                <h4>Add Author</h4><hr/>\n                <form onSubmit={this.submitAuthorForm.bind(this)}>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Name</label>\n                        <div className=\"col-sm-10\">\n                            <input type=\"text\" className=\"form-control\" name=\"name\" id=\"name\" \n                           onChange={(e) => this.setState({name: e.target.value})} placeholder=\"Author Name\"/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Age</label>\n                        <div className=\"col-sm-10\">\n                            <input type=\"text\" className=\"form-control\" name=\"age\" id=\"age\" \n                            onChange={(e) => this.setState({age: e.target.value})} placeholder=\"Author Age\"/>\n                        </div>\n                    </div>\n                    <button className=\"btn btn-dark submitBtn\">+</button>\n                </form>\n\n                <br/><hr/><br/>\n\n                <h4>Add Book</h4><hr/>\n                <form onSubmit={this.submitBookForm.bind(this)}>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Title</label>\n                        <div className=\"col-sm-10\">\n                            <input type=\"text\" className=\"form-control\" name=\"title\" id=\"title\" \n                           onChange={(e) => this.setState({title: e.target.value})} placeholder=\"Book Title\"/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Category</label>\n                        <div className=\"col-sm-10\">\n                            <input type=\"text\" className=\"form-control\" name=\"category\" id=\"category\" \n                            onChange={(e) => this.setState({category: e.target.value})} placeholder=\"Book Category\"/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Author</label>\n                        <div className=\"col-sm-10\">\n                            <select id=\"author\" className=\"form-control\"\n                            onChange={(e) => this.setState({authorId: e.target.value})}>\n                                <option>Select Author</option>\n                                { this.viewAuthors() }\n                            </select>\n                        </div>\n                    </div>\n                    <button className=\"btn btn-dark submitBtn\">+</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default compose(\n    graphql(getAuthorsQuery, {name: 'getAuthorsQuery'}),\n    graphql(addBookMutation, {name: 'addBookMutation'}),\n    graphql(addAuthorMutation, {name: 'addAuthorMutation'})\n)(AddBook);","import React, { Component } from 'react';\nimport './App.css';\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n//apollo client\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n      return (\n        <ApolloProvider client={client}>\n            <div className=\"app container\">\n                <h1 className=\"text-center\">GraphQL BookHub</h1><hr/>\n                <div className=\"row\">                   \n                    <div className=\"col-lg-6\">\n                        <AddBook/>\n                    </div>\n                    <div className=\"col-lg-6 bookData\">\n                        <BookList/>\n                    </div>                   \n                </div>\n            </div>\n        </ApolloProvider> \n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}